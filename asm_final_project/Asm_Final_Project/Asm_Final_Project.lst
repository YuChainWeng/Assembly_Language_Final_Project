Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/29/24 15:25:58
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				
 00000000			.data
 00000000 00000064		    floorLength DWORD 100
 00000004  00000064 [		    floor BYTE 100 DUP(0C4h)
	    C4
	   ]
 00000068 C4			    floorFix  BYTE 0C4h
 = 00000003			    BoxWidth  = 3
 = 00000003			    BoxHeight = 3
				
 00000069 DA			    boxTop    BYTE 0DAh, (BoxWidth - 2) DUP(0C4h), 0BFh
	   00000001 [
	    C4
	   ] BF
 0000006C B3			    boxBody   BYTE 0B3h, (BoxWidth - 2) DUP(' '), 0B3h
	   00000001 [
	    20
	   ] B3
 0000006F C0			    boxBottom BYTE 0C0h, (BoxWidth - 2) DUP(0C4h), 0D9h
	   00000001 [
	    C4
	   ] D9
				
 00000072 20 20 7C 20 00	    cactusTop    BYTE '  ', '|', ' ', 0    ; The top part of the cactus
 00000077 7C 5F 7C 5F 7C	    cactusMiddle BYTE '|', '_', '|', '_', '|', 0 ; The middle part of the cactus
	   00
 0000007D 7C 00			    cactusBottom  BYTE  '|', 0    ; The bottom part of the cactus
 0000007F 0025 0010		    cactus_pos    COORD <37, 16>           ; Cactus position
 00000083 00000003		    cactus_height DWORD 3                  ; Height of the cactus (3 lines)
				
 00000087 20 20 20 20 20	    dinosaurFirstLine BYTE '     ____', 0
	   5F 5F 5F 5F 00
 00000091 20 20 20 20 7C	    dinosaurSecondLine BYTE '    | o__| ', 0
	   20 6F 5F 5F 7C
	   20 00
 0000009D 20 20 20 20 7C	    dinosaurThirdLine BYTE '    | |_ ', 0
	   20 7C 5F 20 00
 000000A7 2F 5C 5F 5F 2F	    dinosaurFourthLine BYTE '/\__/ |- ', 0
	   20 7C 2D 20 00
 000000B1 5C 5F 5F 5F 5F	    dinosaurFifthLine BYTE '\____/ ', 0
	   2F 20 00
 000000B9 4C 00			    dinosaurFirstLeg BYTE 'L', 0
 000000BB 4C 00			    dinosaurSecondLeg BYTE 'L', 0
 000000BD 0003 000D		    dino_pos COORD <3,13> ; 起始位置
				
 000000C1 2D 00			    dinosaurStep BYTE '-', 0
				    
 000000C3 20 20 20 20 20	    dinosaurSquatFirstLine BYTE '         ____ ', 0
	   20 20 20 20 5F
	   5F 5F 5F 20 00
 000000D2 20 2F 5C 5F 5F	    dinosaurSquatSecondLine BYTE ' /\_____| o__| ', 0
	   5F 5F 5F 7C 20
	   6F 5F 5F 7C 20
	   00
 000000E2 20 5C 5F 5F 5F	    dinosaurSquatThirdLine BYTE ' \_______/ ', 0
	   5F 5F 5F 5F 2F
	   20 00
 000000EE 4C 00			    dinosaurSquatFirstLeg BYTE 'L', 0
 000000F0 4C 00			    dinosaurSquatSecondLeg BYTE 'L', 0
 000000F2 22 00			    dinosaurSquatFirstHand BYTE '"', 0
				
 000000F4 0005			    cactus_speed WORD 5 ; 仙人掌的速度
 000000F6 00000000		    outputHandle DWORD 0
 000000FA 00000000		    bytesWritten DWORD 0
 000000FE 00000000		    count DWORD 0
 00000102 0025 0000		    highscore_pos COORD <37,0>
 00000106 0039 0000		    score_pos COORD <57,0>
 0000010A 002F 0002		    gameOver_pos COORD <47,2>
 0000010E 0025 0015		    intro_pos COORD <37,21>
 00000112 002C 0004		    exit_pos COORD <44,4>
 00000116 002A 0005		    restart_pos COORD <42,5>
 0000011A 0000 0012		    floor_pos COORD <0,18>
 0000011E 0050 0019		    xyBound COORD <80,25> ; 螢幕邊界
 00000122 00000000		    cellsWritten DWORD ?
 00000126  00000064 [		    attributes_floor WORD 100 DUP(0Fh)
	    000F
	   ]
 000001EE 0000			    velocity WORD 0  ; 速度，控制跳躍上升和下降
 000001F0 0001			    gravity WORD 1   ; 重力，會讓速度每次減少 1
 000001F2 00000000		    keyState DWORD 0
				
 000001F6  00000064 [		    brownColor WORD 100 DUP(06h) ; 06表示棕色
	    0006
	   ]
 000002BE  00000064 [		    greenColor WORD 100 DUP(0Ah) ; 0A表示綠色
	    000A
	   ]
 00000386  00000064 [		    redColor WORD 100 DUP(0Ch)  ; 0C表示紅色
	    000C
	   ]
 0000044E  00000064 [		    blueColor WORD 100 DUP(01h) ; 0A表示藍色
	    0001
	   ]
 00000516  00000064 [		    purpleColor WORD 100 DUP(05h) ; 05表示紫色
	    0005
	   ]
				
 000005DE 00000000		    score DWORD 0
 000005E2 00000000		    highscore DWORD 0
 000005E6 50 72 65 73 73	    introString BYTE "Press SPACE or UP ARROW to jump", 0
	   20 53 50 41 43
	   45 20 6F 72 20
	   55 50 20 41 52
	   52 4F 57 20 74
	   6F 20 6A 75 6D
	   70 00
 00000606 53 63 6F 72 65	    scoreString BYTE "Score: 0000", 0
	   3A 20 30 30 30
	   30 00
 00000612 48 69 67 68 20	    highscoreString BYTE "High Score: 0000", 0
	   53 63 6F 72 65
	   3A 20 30 30 30
	   30 00
 00000623 47 61 6D 65 20	    gameOverMessage BYTE "Game Over!", 0
	   4F 76 65 72 21
	   00
 0000062E 50 72 65 73 73	    restartMessage BYTE "Press ENTER to restart", 0
	   20 45 4E 54 45
	   52 20 74 6F 20
	   72 65 73 74 61
	   72 74 00
 00000645 45 4E 54 45 52	    enterMessage BYTE "ENTER", 0
	   00
 0000064B 50 72 65 73 73	    exitMessage BYTE "Press ESC to exit", 0
	   20 45 53 43 20
	   74 6F 20 65 78
	   69 74 00
 0000065D 45 53 43 00		    escMessage BYTE "ESC", 0
 00000661 53 50 41 43 45	    spaceMessage BYTE "SPACE", 0
	   00
 00000667 55 50 20 41 52	    upMessage BYTE "UP ARROW", 0
	   52 4F 57 00
				
 00000670 00000000		    hConsole HANDLE ?                ; Handle to the console
 00000674 00000000		    cursorInfo CONSOLE_CURSOR_INFO <> ; Structure to store cursor info
	   00000000
				
 = start@0			main EQU start@0
				
 00000000			.code
				    SetConsoleOutputCP PROTO STDCALL :DWORD
				    GetAsyncKeyState PROTO STDCALL :DWORD
				    Sleep PROTO STDCALL :DWORD  ; 延遲函數
				
 00000000			main PROC
				    INVOKE SetConsoleOutputCP, 437
				
				    ; 取得控制台的輸出控制
				    INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000011  A3 000000F6 R	    mov outputHandle, eax
				
				    ; 畫出初始背景
 00000016  E8 0000047B		    call DrawDinosaur
 0000001B  E8 00000DC8		    call DrawCactus
				    
				    ; 主迴圈
 00000020			mainLoop:
				    ; 加入延遲，避免移動速度過快
				    INVOKE Sleep, 75  ; 延遲 75 毫秒
				    
				    ;INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR attributes_floor, 1, floor_pos, ADDR cellsWritten
				    ;INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR floorFix, 1, floor_pos, ADDR cellsWritten
				    ;call DrawFloor
				    
 00000027  FF 05 000005DE R	    inc score
 0000002D  E8 00000FF8		    call FormatScore
				    ;減回畫方塊所位移的2格
 00000032  66| 83 2D		    sub dino_pos.y, 5
	   000000BF R 05
 0000003A  66| 83 2D		    sub dino_pos.x, 4
	   000000BD R 04
 00000042  E8 00000F06		    call DrawStandLeftStepBackground
				    INVOKE Sleep, 100
 0000004E  66| 83 2D		    sub dino_pos.x, 4
	   000000BD R 04
 00000056  66| 83 2D		    sub dino_pos.y, 5
	   000000BF R 05
 0000005E  E8 00000F0E		    call DrawStandRightStepBackground
 00000063  E8 00000018		    call CheckJumpKey
 00000068  B8 00000000		    mov eax, 0
				    ; 檢查是否碰撞到仙人掌
 0000006D  E8 00000171		    call CheckCollision
 00000072  83 F8 01		    cmp eax, 1
 00000075  74 02		    je GameOver ; 如果碰撞到仙人掌，則遊戲結束
				    ; 如果沒有檢測到任何按鍵，則重新回到主迴圈
 00000077  EB A7		    jmp mainLoop
				
 00000079			Gameover:
 00000079  E8 0000022A		    call GameOverMsg
 0000007E  EB A0		    jmp mainLoop
				
				; **檢測上鍵和空白鍵的跳躍**
 00000080			CheckJumpKey PROC
				    ; 檢測上鍵 (VK_UP)
				    INVOKE GetAsyncKeyState, VK_UP
 00000087  A9 00008000		    test eax, 8000h
 0000008C  75 1D		    jnz DoJump  ; 如果按下上鍵，執行跳躍
				
				    ; 檢測空白鍵 (VK_SPACE)
				    INVOKE GetAsyncKeyState, VK_SPACE
 00000095  A9 00008000		    test eax, 8000h
 0000009A  75 0F		    jnz DoJump  ; 如果按下空白鍵，執行跳躍
				
				    ;check down key
				    INVOKE GetAsyncKeyState, VK_DOWN
 000000A3  A9 00008000		    test eax, 8000h
 000000A8  75 0C		    jnz DoSquat  ; 如果按下下鍵，執行蹲下
 000000AA  C3			    ret
				
 000000AB			DoJump:
 000000AB  E8 0000000C		    call Jump
 000000B0  E8 00000F67		    call WaitForRelease ; 等待按鍵釋放，避免重複跳躍
 000000B5  C3			    ret
				
 000000B6			DoSquat:
 000000B6  E8 000000B1		    call Squat
 000000BB  C3			    ret
 000000BC			CheckJumpKey ENDP
				
				; **跳躍的動作 (獨立出一個子程式)**
				; **跳躍的動作，加入重力效果**
 000000BC			Jump PROC
				    ; 設定初始速度 (例如速度 6 可以測試跳得多高)
 000000BC  66| C7 05		    mov velocity, 12
	   000001EE R
	   000C
 000000C5  66| C7 05		    mov gravity, 3  ; 重力，每次更新速度時會減少
	   000001F0 R
	   0003
				
 000000CE			JumpLoop:
				    ; 檢查下鍵是否被按下
				    INVOKE GetAsyncKeyState, VK_DOWN
 000000D5  A9 00008000		    test eax, 8000h
 000000DA  74 09		    jz NormalDescent  ; 如果沒有按下下鍵，使用正常重力
				    
				    ; 如果按下下鍵，加快下降速度
 000000DC  66| C7 05		    mov gravity, 7    ; 增加重力值使下降更快
	   000001F0 R
	   0007
				    
 000000E5			NormalDescent:
				    ; 更新 Y 座標，模擬向上和向下運動
 000000E5  66| A1		    mov ax, velocity
	   000001EE R
 000000EB  66| 29 05		    sub dino_pos.y, ax  ; y = y - velocity
	   000000BF R
 000000F2  66| 83 2D		    sub dino_pos.x, 4
	   000000BD R 04
				    
				    ; 更新成下一時刻的畫面
 000000FA  E8 00000E2A		    call DrawBackground
				    ;繼續增加score
 000000FF  FF 05 000005DE R	    inc score
 00000105  E8 00000F20		    call FormatScore
				    
				    ; 模擬重力效果，速度會逐漸減少
 0000010A  66| A1		    mov ax, velocity      ; Load velocity into AX
	   000001EE R
 00000110  66| 2B 05		    sub ax, gravity       ; Add gravity to velocity
	   000001F0 R
 00000117  66| A3		    mov velocity, ax      ; Store updated velocity back to memory
	   000001EE R
				    
				    ; 檢查恐龍是否已經回到地面
 0000011D  66| 83 3D		    cmp dino_pos.y, 13  ; 假設地面 y 座標為 11
	   000000BF R 0D
 00000125  7D 09		    jge CheckForSquat    ; 如果 y >= 11，檢查是否需要蹲下
				    
				    ; 延遲，讓動作不會太快
				    INVOKE Sleep, 100
 0000012E  EB 9E		    jmp JumpLoop  ; 繼續下一幀
				
 00000130			CheckForSquat:
				    ; 確保恐龍回到地面位置
 00000130  66| C7 05		    mov dino_pos.y, 18
	   000000BF R
	   0012
				    ; 檢查下鍵是否仍被按著
				    INVOKE GetAsyncKeyState, VK_DOWN
 00000140  A9 00008000		    test eax, 8000h
 00000145  75 16		    jnz GoToSquat       ; 如果下鍵仍被按著，執行蹲下動作
				    
				    ; 如果沒有按下鍵，恢復正常站立姿勢
 00000147  66| 83 2D		    sub dino_pos.x, 4
	   000000BD R 04
 0000014F  66| 83 2D		    sub dino_pos.y, 5
	   000000BF R 05
 00000157  E8 00000DCD		    call DrawBackground
 0000015C  C3			    ret
				
 0000015D			GoToSquat:
				    ; 重置重力值為正常值
 0000015D  66| C7 05		    mov gravity, 3
	   000001F0 R
	   0003
				    ; 直接跳轉到蹲下程序
 00000166  E8 00000001		    call Squat
 0000016B  C3			    ret
 0000016C			Jump ENDP
				
 0000016C			Squat PROC
				    ; 進入蹲下循環
 0000016C			SquatLoop:
				    ; 檢查下鍵是否仍然被按著
				    INVOKE GetAsyncKeyState, VK_DOWN
 00000173  A9 00008000		    test eax, 8000h
 00000178  74 53		    jz RestoreNormalStance  ; 如果放開按鍵，恢復正常姿勢
				
				    ;INVOKE GetAsyncKeyState, VK_UP
				    ;test eax, 8000h
				    ;jnz jump
				
				    ; 如果仍在按著，繼續蹲下狀態
 0000017A  66| 83 2D		    sub dino_pos.x, 7
	   000000BD R 07
 00000182  66| 83 2D		    sub dino_pos.y, 3
	   000000BF R 03
 0000018A  E8 00000E06		    call DrawSquatFirstStepBackground
				    INVOKE Sleep, 100
 00000196  66| 83 2D		    sub dino_pos.x, 7
	   000000BD R 07
 0000019E  66| 83 2D		    sub dino_pos.y, 3
	   000000BF R 03
 000001A6  E8 00000E0E		    call DrawSquatSecondStepBackground
				    
				    ; 增加分數
 000001AB  FF 05 000005DE R	    inc score
 000001B1  E8 00000E74		    call FormatScore
				    
				    ; 檢查碰撞
 000001B6  E8 00000028		    call CheckCollision
 000001BB  83 F8 01		    cmp eax, 1
 000001BE  0F 84 000000E4	    je GameOverMsg
				    
				    ; 添加適當的延遲
				    INVOKE Sleep, 75
				    
				    ; 繼續循環
 000001CB  EB 9F		    jmp SquatLoop
				
 000001CD			RestoreNormalStance:
				    ; 恢復正常姿勢
 000001CD  66| 83 2D		    sub dino_pos.x, 4
	   000000BD R 04
 000001D5  66| 83 2D		    sub dino_pos.y, 5
	   000000BF R 05
 000001DD  E8 00000D47		    call DrawBackground
 000001E2  C3			    ret
 000001E3			Squat ENDP
				    
 000001E3			CheckCollision PROC
				    ; 檢查是否碰撞到仙人掌
 000001E3  66| A1		    mov ax, cactus_pos.x          ; Get the cactus's x position
	   0000007F R
 000001E9  66| 8B 0D		    mov cx, dino_pos.x         ; Get the dinosaur's x position
	   000000BD R
 000001F0  66| 83 E8 01		    sub ax, 1
 000001F4  66| 2B C1		    sub ax, cx                    ; Calculate the horizontal distance between cactus and dinosaur
 000001F7  66| 83 F8 03		    cmp ax, 3                     ; If the difference is 3 or more, no collision
 000001FB  7D 3A		    jge NoCollision               ; Jump to NoCollision if no collision on x-axis
				
 000001FD  66| A1		    mov ax, cactus_pos.y          ; Get the cactus's y position
	   00000081 R
 00000203  66| 8B 0D		    mov cx, dino_pos.y         ; Get the dinosaur's y position
	   000000BF R
 0000020A  66| 2B C1		    sub ax, cx                    ; Calculate the vertical distance between cactus and dinosaur
 0000020D  66| 83 F8 03		    cmp ax, 3                     ; If the difference is 3 or more, no collision
 00000211  7D 24		    jge NoCollision               ; Jump to NoCollision if no collision on y-axis
				
				    ; 如果發生碰撞，檢查分數是否高於 highScore
 00000213  A1 000005DE R	    mov eax, score                 ; Load current score into eax
 00000218  8B 1D 000005E2 R	    mov ebx, highscore             ; Load high score into ebx
 0000021E  3B C3		    cmp eax, ebx                   ; Compare current score with high score
 00000220  7E 0F		    jle NoUpdateHighScore         ; Jump if current score is not greater than high score
				
				    ; 更新 high score
 00000222  A3 000005E2 R	    mov highscore, eax             ; Update high score
				
				    ; 呼叫 FormatHighScore 來顯示更新後的 high score
 00000227  E8 00000E24		    call FormatHighScore
 0000022C  E8 00000CBD		    call DrawHighScore
				
 00000231			NoUpdateHighScore:
				    ; 如果發生碰撞，返回 1，表示遊戲結束
 00000231  B8 00000001		    mov eax, 1                    ; Set eax to 1 indicating collision happened
 00000236  C3			    ret
				
 00000237			NoCollision:
				    ; 如果沒有碰撞，返回 0
 00000237  B8 00000000		    mov eax, 0                    ; Set eax to 0 indicating no collision
 0000023C  C3			    ret
 0000023D			CheckCollision ENDP
				
				
				; **重置遊戲變數，讓遊戲重新開始**
 0000023D			RestartGame PROC
				    ; 重置分數
 0000023D  C7 05 000005DE R	    mov score, 0
	   00000000
 00000247  C6 05 0000060D R	    mov BYTE PTR [scoreString + 7], '0'
	   30
 0000024E  C6 05 0000060E R	    mov BYTE PTR [scoreString + 8], '0'
	   30
 00000255  C6 05 0000060F R	    mov BYTE PTR [scoreString + 9], '0'
	   30
 0000025C  C6 05 00000610 R	    mov BYTE PTR [scoreString + 10], '0'
	   30
				    ; 重置恐龍的位置
 00000263  66| C7 05		    mov dino_pos.x, 3     ; 起始位置 X
	   000000BD R
	   0003
 0000026C  66| C7 05		    mov dino_pos.y, 13    ; 恐龍位置 Y（在地面上）
	   000000BF R
	   000D
				
				    ; 重置仙人掌的位置
 00000275  66| C7 05		    mov cactus_pos.x, 70    ; 仙人掌在螢幕右邊
	   0000007F R
	   0046
 0000027E  66| C7 05		    mov cactus_pos.y, 18    ; 仙人掌的地面高度
	   00000081 R
	   0012
				
				    ; 重置其他遊戲變數
 00000287  66| C7 05		    mov velocity, 6         ; 停止恐龍的跳躍速度
	   000001EE R
	   0006
 00000290  66| C7 05		    mov gravity, 2          ; 重力重置
	   000001F0 R
	   0002
 00000299  66| C7 05		    mov cactus_speed, 5     ; 仙人掌的速度
	   000000F4 R
	   0005
				    
				    ; 重新繪製畫面
 000002A2  E8 00000C82		    call DrawBackground
 000002A7  C3			    ret
 000002A8			RestartGame ENDP
				
				; **遊戲結束**
 000002A8			GameOverMsg PROC
				    ; 顯示 "Game Over!" 訊息
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR redColor, 10, gameOver_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR gameOverMessage, 10, gameOver_pos, ADDR cellsWritten
				    
				    ; 顯示 "Press Enter to restart" 和 "Press Esc to exit" 訊息
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR attributes_floor, 17, exit_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR exitMessage, 17, exit_pos, ADDR cellsWritten
 0000031C  66| 83 05		    add exit_pos.x, 6
	   00000112 R 06
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR blueColor, 3, exit_pos , ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR escMessage, 3, exit_pos , ADDR cellsWritten
 0000035E  66| 83 2D		    sub exit_pos.x, 6
	   00000112 R 06
				
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR attributes_floor, 23, restart_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR restartMessage, 23, restart_pos, ADDR cellsWritten
 000003A0  66| 83 05		    add restart_pos.x, 6
	   00000116 R 06
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR blueColor, 5, restart_pos , ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enterMessage, 5, restart_pos , ADDR cellsWritten
 000003E2  66| 83 2D		    sub restart_pos.x, 6
	   00000116 R 06
				    
				    ; 等待玩家按下 Enter 或 Esc 鍵
 000003EA  E8 00000001		    call WaitForEnter
 000003EF  C3			    ret
 000003F0			GameOverMsg ENDP
				
 000003F0			WaitForEnter PROC
				    ; 檢測是否按下 Enter 或 Esc 鍵
 000003F0			WaitLoop:
				    INVOKE GetAsyncKeyState, VK_RETURN
 000003F7  A9 00008000		    test eax, 8000h        ; 檢查是否按下 Enter 鍵
 000003FC  0F 85 FFFFFE3B	    jnz RestartGame        ; 如果按下 Enter，重啟遊戲
				
				    INVOKE GetAsyncKeyState, VK_ESCAPE
 00000409  A9 00008000		    test eax, 8000h        ; 檢查是否按下 Esc 鍵
 0000040E  75 02		    jnz ExitGame           ; 如果按下 Esc，退出遊戲
				
 00000410  EB DE		    jmp WaitLoop           ; 如果沒有按下任何鍵，繼續等待
 00000412			WaitForEnter ENDP
				
				; **結束遊戲**
 00000412			ExitGame PROC
				    ; 顯示退出訊息
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR attributes_floor, 40, exit_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR exitMessage, 23, exit_pos, ADDR cellsWritten
				    ; 結束程式
				    INVOKE ExitProcess, 0
 00000453			ExitGame ENDP
				
 00000453			DrawFloor PROC
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR attributes_floor, floorLength, floor_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR floor, floorLength, floor_pos, ADDR cellsWritten
 00000495  C3			    ret
 00000496			DrawFloor ENDP
				
 00000496			DrawDinosaur PROC
 00000496  E8 FFFFFFB8		    call DrawFloor
				    ; Draw the dinosaur at its current position 
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 11, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurFirstLine, 11, dino_pos, ADDR cellsWritten
 000004D5  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 11, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSecondLine, 11, dino_pos, ADDR cellsWritten
 00000516  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 8, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurThirdLine, 8, dino_pos, ADDR cellsWritten
 00000557  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 10, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurFourthLine, 10, dino_pos, ADDR cellsWritten
 00000598  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 8, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurFifthLine, 8, dino_pos, ADDR cellsWritten
 000005D9  66| FF 05		    inc dino_pos.y
	   000000BF R
 000005E0  66| 83 05		    add dino_pos.x, 2
	   000000BD R 02
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurFirstLeg, 1, dino_pos, ADDR cellsWritten
 00000622  66| 83 05		    add dino_pos.x, 2
	   000000BD R 02
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSecondLeg, 1, dino_pos, ADDR cellsWritten
 00000664  C3			    ret
 00000665			DrawDinosaur ENDP
				
 00000665			DrawDinosaurStandLeftStep PROC
 00000665  E8 FFFFFDE9		    call DrawFloor
				    ; Draw the dinosaur at its current position 
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 11, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurFirstLine, 11, dino_pos, ADDR cellsWritten
 000006A4  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 11, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSecondLine, 11, dino_pos, ADDR cellsWritten
 000006E5  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 8, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurThirdLine, 8, dino_pos, ADDR cellsWritten
 00000726  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 10, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurFourthLine, 10, dino_pos, ADDR cellsWritten
 00000767  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 8, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurFifthLine, 8, dino_pos, ADDR cellsWritten
 000007A8  66| FF 05		    inc dino_pos.y
	   000000BF R
 000007AF  66| 83 05		    add dino_pos.x, 2
	   000000BD R 02
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurFirstLeg, 1, dino_pos, ADDR cellsWritten
 000007F1  66| 83 05		    add dino_pos.x, 2
	   000000BD R 02
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurStep, 1, dino_pos, ADDR cellsWritten
 00000833  C3			    ret
 00000834			DrawDinosaurStandLeftStep ENDP
				
 00000834			DrawDinosaurStandRightStep PROC
 00000834  E8 FFFFFC1A		    call DrawFloor
				    ; Draw the dinosaur at its current position 
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 11, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurFirstLine, 11, dino_pos, ADDR cellsWritten
 00000873  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 11, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSecondLine, 11, dino_pos, ADDR cellsWritten
 000008B4  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 8, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurThirdLine, 8, dino_pos, ADDR cellsWritten
 000008F5  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 10, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurFourthLine, 10, dino_pos, ADDR cellsWritten
 00000936  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 8, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurFifthLine, 8, dino_pos, ADDR cellsWritten
 00000977  66| FF 05		    inc dino_pos.y
	   000000BF R
 0000097E  66| 83 05		    add dino_pos.x, 2
	   000000BD R 02
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurStep, 1, dino_pos, ADDR cellsWritten
 000009C0  66| 83 05		    add dino_pos.x, 2
	   000000BD R 02
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSecondLeg, 1, dino_pos, ADDR cellsWritten
 00000A02  C3			    ret
 00000A03			DrawDinosaurStandRightStep ENDP
				
 00000A03			DrawSquatFirstStep PROC
 00000A03  E8 FFFFFA4B		    call DrawFloor
				    ; Draw the dinosaur at its current position 
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 15, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSquatFirstLine, 15, dino_pos, ADDR cellsWritten
 00000A42  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 17, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSquatSecondLine, 17, dino_pos, ADDR cellsWritten
 00000A83  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 11, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSquatThirdLine, 11, dino_pos, ADDR cellsWritten
 00000AC4  66| FF 05		    inc dino_pos.y
	   000000BF R
 00000ACB  66| 83 05		    add dino_pos.x, 3
	   000000BD R 03
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurStep, 1, dino_pos, ADDR cellsWritten
 00000B0D  66| 83 05		    add dino_pos.x, 2
	   000000BD R 02
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSquatSecondLeg, 1, dino_pos, ADDR cellsWritten
 00000B4F  66| 83 05		    add dino_pos.x, 2
	   000000BD R 02
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSquatFirstHand, 1, dino_pos, ADDR cellsWritten
 00000B91  C3			    ret
 00000B92			DrawSquatFirstStep ENDP
				
 00000B92			DrawSquatSecondStep PROC
 00000B92  E8 FFFFF8BC		    call DrawFloor
				    ; Draw the dinosaur at its current position 
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 15, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSquatFirstLine, 15, dino_pos, ADDR cellsWritten
 00000BD1  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 17, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSquatSecondLine, 17, dino_pos, ADDR cellsWritten
 00000C12  66| FF 05		    inc dino_pos.y
	   000000BF R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 11, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSquatThirdLine, 11, dino_pos, ADDR cellsWritten
 00000C53  66| FF 05		    inc dino_pos.y
	   000000BF R
 00000C5A  66| 83 05		    add dino_pos.x, 3
	   000000BD R 03
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSquatFirstLeg, 1, dino_pos, ADDR cellsWritten
 00000C9C  66| 83 05		    add dino_pos.x, 2
	   000000BD R 02
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurStep, 1, dino_pos, ADDR cellsWritten
 00000CDE  66| 83 05		    add dino_pos.x, 2
	   000000BD R 02
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR brownColor, 1, dino_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR dinosaurSquatFirstHand, 1, dino_pos, ADDR cellsWritten
 00000D20  C3			    ret
 00000D21			DrawSquatSecondStep ENDP
				
 00000D21			DrawIntro PROC
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR attributes_floor, 31, intro_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR introString, 31, intro_pos, ADDR cellsWritten
 00000D5B  66| 83 05		    add intro_pos.x, 6
	   0000010E R 06
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR purpleColor, 5, intro_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR spaceMessage, 5, intro_pos, ADDR cellsWritten
 00000D9D  66| 83 05		    add intro_pos.x, 9
	   0000010E R 09
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR purpleColor, 8, intro_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR upMessage, 8, intro_pos, ADDR cellsWritten
 00000DDF  66| 83 2D		    sub intro_pos.x, 15
	   0000010E R 0F
 00000DE7  C3			    ret
 00000DE8			DrawIntro ENDP
				
 00000DE8			DrawCactus PROC
				    ; Draw the cactus at its current position
				    ; Draw top part
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR greenColor, 3, cactus_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR cactusTop, 3, cactus_pos, ADDR cellsWritten
				
				    ; Move down to the next line for middle part
 00000E22  66| FF 05		    inc cactus_pos.y
	   00000081 R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR greenColor, 6, cactus_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR cactusMiddle, 6, cactus_pos, ADDR cellsWritten
				
				    ; Move down to the next line for bottom part
 00000E63  66| FF 05		    inc cactus_pos.y
	   00000081 R
 00000E6A  66| FF 05		    inc cactus_pos.x
	   0000007F R
 00000E71  66| FF 05		    inc cactus_pos.x
	   0000007F R
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR greenColor, 1, cactus_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR cactusBottom, 1, cactus_pos, ADDR cellsWritten
 00000EB2  C3			    ret
 00000EB3			DrawCactus ENDP
				
 00000EB3			DrawScore PROC
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR attributes_floor, 40, score_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR scoreString, 12, score_pos, ADDR cellsWritten
 00000EED  C3			    ret
 00000EEE			DrawScore ENDP
				
 00000EEE			DrawHighScore PROC
				    INVOKE WriteConsoleOutputAttribute, outputHandle, ADDR attributes_floor, 40, highscore_pos, ADDR cellsWritten
				    INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR highscoreString, 17, highscore_pos, ADDR cellsWritten
 00000F28  C3			    ret
 00000F29			DrawHighScore ENDP
				
				;繪製下一時刻的背景(移動仙人掌)
 00000F29			DrawBackground PROC
 00000F29  E8 00000000 E	    call Clrscr
 00000F2E  E8 FFFFF520		    call DrawFloor
 00000F33  E8 FFFFF55E		    call DrawDinosaur
 00000F38  E8 FFFFFDE4		    call DrawIntro
 00000F3D  E8 0000009B		    call MoveCactus
 00000F42  E8 FFFFFF6C		    call DrawScore
 00000F47  E8 FFFFFFA2		    call DrawHighScore
 00000F4C  C3			    ret
 00000F4D			DrawBackground ENDP
				
 00000F4D			DrawStandLeftStepBackground PROC
 00000F4D  E8 00000000 E	    call Clrscr
 00000F52  E8 FFFFF4FC		    call DrawFloor
 00000F57  E8 FFFFF709		    call DrawDinosaurStandLeftStep
 00000F5C  E8 FFFFFDC0		    call DrawIntro
 00000F61  E8 00000077		    call MoveCactus
 00000F66  E8 FFFFFF48		    call DrawScore
 00000F6B  E8 FFFFFF7E		    call DrawHighScore
 00000F70  C3			    ret
 00000F71			DrawStandLeftStepBackground ENDP
				
 00000F71			DrawStandRightStepBackground PROC
 00000F71  E8 00000000 E	    call Clrscr
 00000F76  E8 FFFFF4D8		    call DrawFloor
 00000F7B  E8 FFFFF8B4		    call DrawDinosaurStandRightStep
 00000F80  E8 FFFFFD9C		    call DrawIntro
 00000F85  E8 00000053		    call MoveCactus
 00000F8A  E8 FFFFFF24		    call DrawScore
 00000F8F  E8 FFFFFF5A		    call DrawHighScore
 00000F94  C3			    ret
 00000F95			DrawStandRightStepBackground ENDP
				
 00000F95			DrawSquatFirstStepBackground PROC
 00000F95  E8 00000000 E	    call Clrscr
 00000F9A  E8 FFFFF4B4		    call DrawFloor
 00000F9F  E8 FFFFFA5F		    call DrawSquatFirstStep
 00000FA4  E8 FFFFFD78		    call DrawIntro
 00000FA9  E8 0000002F		    call MoveCactus
 00000FAE  E8 FFFFFF00		    call DrawScore
 00000FB3  E8 FFFFFF36		    call DrawHighScore
 00000FB8  C3			    ret
 00000FB9			DrawSquatFirstStepBackground ENDP
				
 00000FB9			DrawSquatSecondStepBackground PROC
 00000FB9  E8 00000000 E	    call Clrscr
 00000FBE  E8 FFFFF490		    call DrawFloor
 00000FC3  E8 FFFFFBCA		    call DrawSquatSecondStep
 00000FC8  E8 FFFFFD54		    call DrawIntro
 00000FCD  E8 0000000B		    call MoveCactus
 00000FD2  E8 FFFFFEDC		    call DrawScore
 00000FD7  E8 FFFFFF12		    call DrawHighScore
 00000FDC  C3			    ret
 00000FDD			DrawSquatSecondStepBackground ENDP
				
 00000FDD			MoveCactus PROC
				    ; 移動仙人掌
 00000FDD  66| A1		    mov ax, cactus_speed
	   000000F4 R
 00000FE3  66| 29 05		    sub cactus_pos.x, ax
	   0000007F R
 00000FEA  66| FF 0D		    dec cactus_pos.y
	   00000081 R
 00000FF1  66| FF 0D		    dec cactus_pos.y
	   00000081 R
 00000FF8  E8 FFFFFDEB		    call DrawCactus
				    ; 如果仙人掌越過螢幕邊界，則重新生成
 00000FFD  66| 83 3D		    cmp cactus_pos.x, 0
	   0000007F R 00
				
 00001005  7C 01		    jl resetCactus
 00001007  C3			    ret
				
 00001008			resetCactus:
 00001008  B8 00000014		    mov eax, 20
 0000100D  E8 00000000 E	    call RandomRange
 00001012  83 C0 32		    add eax, 50
 00001015  66| A3		    mov cactus_pos.x, ax ; 重新生成仙人掌
	   0000007F R
 0000101B  C3			    ret
 0000101C			MoveCactus ENDP
				
				; 等待按鍵釋放
 0000101C			WaitForRelease PROC
				    ; ecx = 虛擬鍵的代碼
 0000101C			WaitLoop:
				    INVOKE GetAsyncKeyState, ecx
 00001022  A9 00008000		    test eax, 8000h
 00001027  75 F3		    jnz WaitLoop ; 如果還在按著按鍵，繼續等待
 00001029  C3			    ret
 0000102A			WaitForRelease ENDP
				
 0000102A			FormatScore PROC
 0000102A  A1 000005DE R	    mov eax, score
 0000102F  B9 0000000A		    mov ecx, 10
 00001034  BF 00000611 R	    mov edi, OFFSET scoreString + 11
 00001039  C6 07 00		    mov BYTE PTR [edi], 0
 0000103C  BA 00000000		    mov edx, 0
 00001041			    L1:
 00001041  33 D2		    xor edx, edx
 00001043  F7 F1		        div ecx
 00001045  80 C2 30		        add dl, '0'
 00001048  4F			        dec edi
 00001049  88 17		        mov BYTE PTR [edi], dl
 0000104B  85 C0		        test eax, eax
 0000104D  75 F2		        jnz L1
 0000104F  C3			    ret
 00001050			FormatScore ENDP
				
 00001050			FormatHighScore PROC
 00001050  A1 000005E2 R	    mov eax, highscore
 00001055  B9 0000000A		    mov ecx, 10
 0000105A  BF 00000622 R	    mov edi, OFFSET highscoreString + 16
 0000105F  C6 07 00		    mov BYTE PTR [edi], 0
 00001062  BA 00000000		    mov edx, 0
 00001067			    L1:
 00001067  33 D2		    xor edx, edx
 00001069  F7 F1		        div ecx
 0000106B  80 C2 30		        add dl, '0'
 0000106E  4F			        dec edi
 0000106F  88 17		        mov BYTE PTR [edi], dl
 00001071  85 C0		        test eax, eax
 00001073  75 F2		        jnz L1
 00001075  C3			    ret
 00001076			FormatHighScore ENDP
				
 00001076			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/29/24 15:25:58
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000067C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001076 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CheckCollision . . . . . . . . .	P Near	 000001E3 _TEXT	Length= 0000005A Public STDCALL
  NoUpdateHighScore  . . . . . .	L Near	 00000231 _TEXT	
  NoCollision  . . . . . . . . .	L Near	 00000237 _TEXT	
CheckJumpKey . . . . . . . . . .	P Near	 00000080 _TEXT	Length= 0000003C Public STDCALL
  DoJump . . . . . . . . . . . .	L Near	 000000AB _TEXT	
  DoSquat  . . . . . . . . . . .	L Near	 000000B6 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawBackground . . . . . . . . .	P Near	 00000F29 _TEXT	Length= 00000024 Public STDCALL
DrawCactus . . . . . . . . . . .	P Near	 00000DE8 _TEXT	Length= 000000CB Public STDCALL
DrawDinosaurStandLeftStep  . . .	P Near	 00000665 _TEXT	Length= 000001CF Public STDCALL
DrawDinosaurStandRightStep . . .	P Near	 00000834 _TEXT	Length= 000001CF Public STDCALL
DrawDinosaur . . . . . . . . . .	P Near	 00000496 _TEXT	Length= 000001CF Public STDCALL
DrawFloor  . . . . . . . . . . .	P Near	 00000453 _TEXT	Length= 00000043 Public STDCALL
DrawHighScore  . . . . . . . . .	P Near	 00000EEE _TEXT	Length= 0000003B Public STDCALL
DrawIntro  . . . . . . . . . . .	P Near	 00000D21 _TEXT	Length= 000000C7 Public STDCALL
DrawScore  . . . . . . . . . . .	P Near	 00000EB3 _TEXT	Length= 0000003B Public STDCALL
DrawSquatFirstStepBackground . .	P Near	 00000F95 _TEXT	Length= 00000024 Public STDCALL
DrawSquatFirstStep . . . . . . .	P Near	 00000A03 _TEXT	Length= 0000018F Public STDCALL
DrawSquatSecondStepBackground  .	P Near	 00000FB9 _TEXT	Length= 00000024 Public STDCALL
DrawSquatSecondStep  . . . . . .	P Near	 00000B92 _TEXT	Length= 0000018F Public STDCALL
DrawStandLeftStepBackground  . .	P Near	 00000F4D _TEXT	Length= 00000024 Public STDCALL
DrawStandRightStepBackground . .	P Near	 00000F71 _TEXT	Length= 00000024 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitGame . . . . . . . . . . . .	P Near	 00000412 _TEXT	Length= 00000041 Public STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatHighScore  . . . . . . . .	P Near	 00001050 _TEXT	Length= 00000026 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00001067 _TEXT	
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatScore  . . . . . . . . . .	P Near	 0000102A _TEXT	Length= 00000026 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00001041 _TEXT	
GameOverMsg  . . . . . . . . . .	P Near	 000002A8 _TEXT	Length= 00000148 Public STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Jump . . . . . . . . . . . . . .	P Near	 000000BC _TEXT	Length= 000000B0 Public STDCALL
  JumpLoop . . . . . . . . . . .	L Near	 000000CE _TEXT	
  NormalDescent  . . . . . . . .	L Near	 000000E5 _TEXT	
  CheckForSquat  . . . . . . . .	L Near	 00000130 _TEXT	
  GoToSquat  . . . . . . . . . .	L Near	 0000015D _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MoveCactus . . . . . . . . . . .	P Near	 00000FDD _TEXT	Length= 0000003F Public STDCALL
  resetCactus  . . . . . . . . .	L Near	 00001008 _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RestartGame  . . . . . . . . . .	P Near	 0000023D _TEXT	Length= 0000006B Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Squat  . . . . . . . . . . . . .	P Near	 0000016C _TEXT	Length= 00000077 Public STDCALL
  SquatLoop  . . . . . . . . . .	L Near	 0000016C _TEXT	
  RestoreNormalStance  . . . . .	L Near	 000001CD _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitForEnter . . . . . . . . . .	P Near	 000003F0 _TEXT	Length= 00000022 Public STDCALL
  WaitLoop . . . . . . . . . . .	L Near	 000003F0 _TEXT	
WaitForRelease . . . . . . . . .	P Near	 0000101C _TEXT	Length= 0000000E Public STDCALL
  WaitLoop . . . . . . . . . . .	L Near	 0000101C _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
start@0  . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00001076 Public STDCALL
  mainLoop . . . . . . . . . . .	L Near	 00000020 _TEXT	
  Gameover . . . . . . . . . . .	L Near	 00000079 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BoxHeight  . . . . . . . . . . .	Number	 00000003h   
BoxWidth . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
attributes_floor . . . . . . . .	Word	 00000126 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blueColor  . . . . . . . . . . .	Word	 0000044E _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
boxBody  . . . . . . . . . . . .	Byte	 0000006C _DATA	
boxBottom  . . . . . . . . . . .	Byte	 0000006F _DATA	
boxTop . . . . . . . . . . . . .	Byte	 00000069 _DATA	
brownColor . . . . . . . . . . .	Word	 000001F6 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesWritten . . . . . . . . . .	DWord	 000000FA _DATA	
cactusBottom . . . . . . . . . .	Byte	 0000007D _DATA	
cactusMiddle . . . . . . . . . .	Byte	 00000077 _DATA	
cactusTop  . . . . . . . . . . .	Byte	 00000072 _DATA	
cactus_height  . . . . . . . . .	DWord	 00000083 _DATA	
cactus_pos . . . . . . . . . . .	COORD	 0000007F _DATA	
cactus_speed . . . . . . . . . .	Word	 000000F4 _DATA	
cellsWritten . . . . . . . . . .	DWord	 00000122 _DATA	
count  . . . . . . . . . . . . .	DWord	 000000FE _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000674 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dino_pos . . . . . . . . . . . .	COORD	 000000BD _DATA	
dinosaurFifthLine  . . . . . . .	Byte	 000000B1 _DATA	
dinosaurFirstLeg . . . . . . . .	Byte	 000000B9 _DATA	
dinosaurFirstLine  . . . . . . .	Byte	 00000087 _DATA	
dinosaurFourthLine . . . . . . .	Byte	 000000A7 _DATA	
dinosaurSecondLeg  . . . . . . .	Byte	 000000BB _DATA	
dinosaurSecondLine . . . . . . .	Byte	 00000091 _DATA	
dinosaurSquatFirstHand . . . . .	Byte	 000000F2 _DATA	
dinosaurSquatFirstLeg  . . . . .	Byte	 000000EE _DATA	
dinosaurSquatFirstLine . . . . .	Byte	 000000C3 _DATA	
dinosaurSquatSecondLeg . . . . .	Byte	 000000F0 _DATA	
dinosaurSquatSecondLine  . . . .	Byte	 000000D2 _DATA	
dinosaurSquatThirdLine . . . . .	Byte	 000000E2 _DATA	
dinosaurStep . . . . . . . . . .	Byte	 000000C1 _DATA	
dinosaurThirdLine  . . . . . . .	Byte	 0000009D _DATA	
enterMessage . . . . . . . . . .	Byte	 00000645 _DATA	
escMessage . . . . . . . . . . .	Byte	 0000065D _DATA	
exitMessage  . . . . . . . . . .	Byte	 0000064B _DATA	
exit_pos . . . . . . . . . . . .	COORD	 00000112 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
floorFix . . . . . . . . . . . .	Byte	 00000068 _DATA	
floorLength  . . . . . . . . . .	DWord	 00000000 _DATA	
floor_pos  . . . . . . . . . . .	COORD	 0000011A _DATA	
floor  . . . . . . . . . . . . .	Byte	 00000004 _DATA	
gameOverMessage  . . . . . . . .	Byte	 00000623 _DATA	
gameOver_pos . . . . . . . . . .	COORD	 0000010A _DATA	
gravity  . . . . . . . . . . . .	Word	 000001F0 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
greenColor . . . . . . . . . . .	Word	 000002BE _DATA	
green  . . . . . . . . . . . . .	Number	 00000002h   
hConsole . . . . . . . . . . . .	DWord	 00000670 _DATA	
highscoreString  . . . . . . . .	Byte	 00000612 _DATA	
highscore_pos  . . . . . . . . .	COORD	 00000102 _DATA	
highscore  . . . . . . . . . . .	DWord	 000005E2 _DATA	
introString  . . . . . . . . . .	Byte	 000005E6 _DATA	
intro_pos  . . . . . . . . . . .	COORD	 0000010E _DATA	
keyState . . . . . . . . . . . .	DWord	 000001F2 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
main . . . . . . . . . . . . . .	Text   	 start@0
outputHandle . . . . . . . . . .	DWord	 000000F6 _DATA	
purpleColor  . . . . . . . . . .	Word	 00000516 _DATA	
redColor . . . . . . . . . . . .	Word	 00000386 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
restartMessage . . . . . . . . .	Byte	 0000062E _DATA	
restart_pos  . . . . . . . . . .	COORD	 00000116 _DATA	
scoreString  . . . . . . . . . .	Byte	 00000606 _DATA	
score_pos  . . . . . . . . . . .	COORD	 00000106 _DATA	
score  . . . . . . . . . . . . .	DWord	 000005DE _DATA	
spaceMessage . . . . . . . . . .	Byte	 00000661 _DATA	
upMessage  . . . . . . . . . . .	Byte	 00000667 _DATA	
velocity . . . . . . . . . . . .	Word	 000001EE _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xyBound  . . . . . . . . . . . .	COORD	 0000011E _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
